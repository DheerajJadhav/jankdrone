#include <Arduino.h>
#include <limits>
#include "log.h"
#include "shm.h"

template <>
Shm::Var::Var(std::string name, Group* group, int* value, int tag):
	m_name{name}, m_group{group}, m_type{Type::INT}, m_value{value}, m_tag{tag} {}

template <>
Shm::Var::Var(std::string name, Group* group, float* value, int tag):
	m_name{name}, m_group{group}, m_type{Type::FLOAT}, m_value{value}, m_tag{tag} {}

template <>
Shm::Var::Var(std::string name, Group* group, bool* value, int tag):
	m_name{name}, m_group{group}, m_type{Type::BOOL}, m_value{value}, m_tag{tag} {}

template <>
Shm::Var::Var(std::string name, Group* group, std::string* value, int tag):
	m_name{name}, m_group{group}, m_type{Type::STRING}, m_value{value}, m_tag{tag} {}

std::string Shm::Var::name() {
	return m_name;
}

Shm::Var::Type Shm::Var::type() {
	return m_type;
}

int Shm::Var::tag() {
	return m_tag;
}

std::string Shm::Var::path() {
	return m_group->name() + "." + m_name;
}

Shm::Group* Shm::Var::group() {
	return m_group;
}

std::string Shm::Var::typeString(Type type) {
	switch (type) {
		case Var::Type::INT:
			return "int";
		case Var::Type::FLOAT:
			return "float";
		case Var::Type::BOOL:
			return "bool";
		case Var::Type::STRING:
			return "string";
	}
	return "";
}

template <>
void Shm::Var::set(int value) {
	if (m_type == Type::FLOAT) {
		set((float)value);
	} else {
		verifyType<int>();
		*(int*)m_value = value;
	}
}

template <>
void Shm::Var::set(const char* value) {
	set(std::string(value));
}

template <>
float Shm::Var::get() {
	if (m_type == Type::INT) {
		return *(int*)m_value;
	} else {
		verifyType<float>();
		return *(float*)m_value;
	}
}

template <>
void Shm::Var::verifyType<int>() {
	verifyType(Type::INT);
}

template <>
void Shm::Var::verifyType<float>() {
	verifyType(Type::FLOAT);
}

template <>
void Shm::Var::verifyType<bool>() {
	verifyType(Type::BOOL);
}

template <>
void Shm::Var::verifyType<std::string>() {
	verifyType(Type::STRING);
}

void Shm::Var::verifyType(Type type) {
	std::string typeName;
	if (type != m_type) {
		Log::fatal("Variable %s has type %s not type %s",
				m_name.c_str(), typeString(m_type).c_str(), typeString(type).c_str());
	}
}

Shm::Group::Group(std::string name, std::vector<Var> vars) {
	m_name = name;
	for (auto& v : vars) {
		m_vars.emplace(v.name(), v);
	}
}

std::string Shm::Group::name() {
	return m_name;
}

Shm::Var* Shm::Group::var(std::string name) {
	auto var = varIfExists(name);
	if (!var) {
		Log::fatal("Variable %s not found", name.c_str());
	}

	return var;
}

Shm::Var* Shm::Group::varIfExists(std::string name) {
	auto it = m_vars.find(name);
	if (it != m_vars.end()) {
		return &it->second;
	} else {
		return nullptr;
	}
}

std::vector<Shm::Var*> Shm::Group::vars() {
	std::vector<Var*> varList;
	for (auto& varPair : m_vars) {
		varList.push_back(&varPair.second);
	}
	return varList;
}

std::vector<Shm::Var*> Shm::Group::array(std::string prefix) {
	std::unordered_map<int, Shm::Var*> indexMap;
	int minI = std::numeric_limits<int>::max;
	int maxI = std::numeric_limits<int>::min;
	for (auto& vItem : m_vars) {
		auto v = &vItem.second;
		auto name = v->name();
		if (name.size() > prefix.size() && name.substr(0, prefix.size()) == prefix) {
			int i = atoi(name.substr(prefix.size()).c_str());
			indexMap.emplace(i, v);
			if (i > maxI) maxI = i;
			if (i < minI) minI = i;
		}
	}

	// There's probably an elegant way to show this proves the correctness of
	// the array
	if (minI != 0 || maxI != indexMap.size() - 1) {
		Log::fatal("Invalid shm array: %s.%s[]", m_name.c_str(), prefix.c_str());
	}

	std::vector<Shm::Var*> array(maxI + 1);
	for (auto& item : indexMap) {
		array[item.first] = item.second;
	}
	return array;
}

Shm::Shm(): m_groups{
	<!--(for g_name, g_vars in sorted(shm.items()))-->
	{"$!g_name!$", &$!g_name!$},
	<!--(end)-->
} {
	for (auto& g : m_groups) {
		for (auto v : g.second->vars()) {
			m_tagMap[v->tag()] = v;
		}
	}
}

Shm::Var* Shm::var(std::string name) {
	auto v = varIfExists(name);
	if (!v) {
		Log::fatal("Variable %s not found", name.c_str());
	}

	return v;
}

Shm::Var* Shm::var(int tag) {
	auto v = varIfExists(tag);
	if (!v) {
		Log::fatal("Variable tag %d not found", tag);
	}

	return v;
}

Shm::Var* Shm::varIfExists(std::string name) {
	auto dotPos = name.find('.');
	if (dotPos == std::string::npos) {
		return nullptr;
	}

	auto groupName = name.substr(0, dotPos);
	auto g = groupIfExists(groupName);
	if (g) {
		auto varName = name.substr(dotPos + 1);
		return g->varIfExists(varName);
	} else {
		return nullptr;
	}
}

Shm::Var* Shm::varIfExists(int tag) {
	if (tag < 0 || 
			(size_t)tag >= sizeof(m_tagMap) / sizeof(m_tagMap[0])) {
		return nullptr;
	} else {
		return m_tagMap[tag];
	}
}

Shm::Group* Shm::group(std::string name) {
	auto g = groupIfExists(name);
	if (!g) {
		Log::fatal("Group %s not found", name.c_str());
	}

	return g;
}

Shm::Group* Shm::groupIfExists(std::string name) {
	auto it = m_groups.find(name);
	if (it == m_groups.end()) {
		return nullptr;
	} else {
		return it->second;
	}
}

std::vector<Shm::Group*> Shm::groups() {
	std::vector<Shm::Group*> gs;
	for (auto& groupPair : m_groups) {
		gs.push_back(groupPair.second);
	}
	return gs;
}

	<!--(macro CVALUE)-->
<!--(if value is True)-->
true#!
<!--(elif value is False)-->
false#!
<!--(elif isinstance(value, str))-->
"$!value!$"#!
<!--(else)-->
$!value!$#!
<!--(end)-->
	<!--(end)-->

<!--(for g_name, g_vars in sorted(shm.items()))-->
Shm::Group_$!g_name!$::Group_$!g_name!$():
	Group{"$!g_name!$", {
		<!--(for v_name, v_info in sorted(g_vars.items()))-->
		{"$!v_name!$", this, &$!v_name!$, $!v_info.tag!$},
		<!--(end)-->
	}},

$!setvar("sortedVars", "list(sorted(g_vars.items()))")!$#!
	<!--(for v_name, v_info in sortedVars[:-1])-->
	$!v_name!${$!CVALUE(value=v_info.value)!$},
	<!--(end)-->
	$!sortedVars[-1][0]!${$!CVALUE(value=sortedVars[-1][1].value)!$}
{}
	
<!--(end)-->

Shm& shm() {
	static Shm shm;
	return shm;
}
